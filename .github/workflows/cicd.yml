name: CI/CD with Github Actions and Docker

on:
  workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Create application.properties
      run: |
        mkdir -p src/main/resources
        echo "spring.application.name=student" > src/main/resources/application.properties
        echo "spring.datasource.url=jdbc:mysql://mysql:3306/app?useSSL=false&serverTimezone=UTC" >> src/main/resources/application.properties
        echo "spring.datasource.username=app" >> src/main/resources/application.properties
        echo "spring.datasource.password=app12345" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
        echo "spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.properties

    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./target/*.jar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:latest

  deploy:
    needs: ci
    runs-on: ubuntu-latest

    steps:
    - name: Set up SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          if ! docker -v > /dev/null 2>&1; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            newgrp docker
          fi
          
          mkdir -p /home/ubuntu/docker
          echo "version: '3.8'

          services:
            mysql:
              image: mysql:8
              environment:
                MYSQL_ROOT_PASSWORD: rootpassword
                MYSQL_DATABASE: app
                MYSQL_USER: app
                MYSQL_PASSWORD: app12345
              networks:
                - app-network
              ports:
                - '3306:3306'
              restart: always

            app:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:latest
              depends_on:
                - mysql
              ports:
                - '8080:8080'
              environment:
                SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/app?useSSL=false&serverTimezone=UTC
                SPRING_DATASOURCE_USERNAME: app
                SPRING_DATASOURCE_PASSWORD: app12345
              networks:
                - app-network
              restart: always

          networks:
            app-network:
              driver: bridge" > /home/ubuntu/docker/docker-compose.yml

          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:latest
          sudo docker stop app-container || true
          sudo docker rm app-container || true
          sudo docker-compose -f /home/ubuntu/docker/docker-compose.yml up -d
